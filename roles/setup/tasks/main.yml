- name: Create a user 'backupuser'
  become: true
  become_user: root
  ansible.builtin.user:
    name: "{{ setup_backup_user }}"
    create_home: true

- name: Add backup SSH key
  become: true
  become_user: root
  ansible.builtin.copy:
    dest: "{{ setup_backup_ssh_key_path }}"
    content: "{{ setup_backup_ssh_key_content }}"
    mode: "0600"
    owner: "{{ setup_backup_user }}"
    group: "{{ setup_backup_user }}"

- name: Add a host in the configuration
  become: true
  become_user: root
  community.general.ssh_config:
    user: "{{ setup_backup_user }}"
    host: "*"
    state: present
    other_options:
      serveraliveinterval: "120"

- name: Upgrade all APT packages
  become: true
  become_user: root
  ansible.builtin.apt:
    upgrade: dist
    autoremove: true
    update_cache: true
    cache_valid_time: 3600
  when: ansible_os_family == "Debian"
  register: setup_apt_upgrade

- name: Print APT upgrade
  ansible.builtin.debug:
    msg: "{{ setup_apt_upgrade.stdout_lines }}"
  when: setup_apt_upgrade.stdout_lines is defined

- name: Remove unused Docker data
  community.docker.docker_prune:
    containers: true
    images: true
    networks: true
    volumes: true
    builder_cache: true

- name: Check if reboot is required
  become: true
  become_user: root
  ansible.builtin.stat:
    path: /var/run/reboot-required
  register: setup_reboot_required
  when: ansible_os_family == "Debian"

- name: Reboot the server if needed
  become: true
  become_user: root
  ansible.builtin.reboot:
    reboot_timeout: 600
  when: setup_reboot_required.stat.exists
